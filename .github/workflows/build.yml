name: Build (Windows/macOS/Linux)

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
    paths:
      - '**/*.py'
      - 'lang/**'
      - 'HELP.md'
      - 'yt_audio_workbench.spec'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Tests (${{ matrix.os }} | py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        python: ['3.11']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install OS dependencies (Linux only)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk
      - name: Install Python deps
        run: |
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          python -m pip install --upgrade pip
          python -m pip install pytest
      - name: Run tests
        env:
          PYTHONPATH: .
        run: pytest -q

  build:
    name: Build (${{ matrix.os }})
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install OS dependencies (Linux only)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk
      - name: Install Python deps
        run: |
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
      - name: Build with PyInstaller
        run: |
          pyinstaller -y yt_audio_workbench.spec
      - name: Pack artifact (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $zip = "YT-Audio-Workbench-Windows.zip"
          Compress-Archive -Path "dist\YT-Audio-Workbench\*" -DestinationPath $zip
          echo "ZIP_NAME=$zip" >> $env:GITHUB_ENV
      - name: Pack artifact (macOS/Linux)
        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')
        run: |
          cd dist
          zip -r ../YT-Audio-Workbench-${{ runner.os }}.zip YT-Audio-Workbench
          echo "ZIP_NAME=YT-Audio-Workbench-${{ runner.os }}.zip" >> $GITHUB_ENV
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: YT-Audio-Workbench-${{ matrix.os }}
          path: ${{ env.ZIP_NAME }}

  release:
    name: Release on tag
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List artifacts
        run: ls -R artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            artifacts/**/YT-Audio-Workbench-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
