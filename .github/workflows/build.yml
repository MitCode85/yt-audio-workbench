name: Build (Windows/macOS/Linux)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.os }}
  cancel-in-progress: true

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install project deps (if any)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            echo "No requirements.txt found; installing tools only"
          fi
        shell: bash

      - name: Install dev tools
        run: python -m pip install pyinstaller ruff mypy bandit pytest

      - name: Lint (ruff)
        run: python -m ruff check .

      - name: Type-check (mypy, lenient)
        run: python -m mypy --ignore-missing-imports . || true

      - name: Run tests
        env:
          PYTHONPATH: .
        run: pytest -q

      - name: Build (PyInstaller)
        run: pyinstaller --noconfirm --name YT-Audio-Workbench --onefile yt_audio_backup_gui.py

      - name: List dist (if present)
        run: |
          if [ -d dist ]; then
            ls -la dist
            find dist -maxdepth 2 -type f -print || true
          fi
        shell: bash

      # ----- Set artifact name per-OS -----
      - name: Set ZIP_NAME (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          "ZIP_NAME=YT-Audio-Workbench-Windows.zip" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Set ZIP_NAME (*nix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            echo "ZIP_NAME=YT-Audio-Workbench-macOS.zip" >> "$GITHUB_ENV"
          else
            echo "ZIP_NAME=YT-Audio-Workbench-Linux.zip" >> "$GITHUB_ENV"
          fi

      # ----- Package per-OS -----
      - name: Zip dist (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path -Path dist)) { throw "dist/ does not exist" }
          if (Test-Path -Path "dist\\YT-Audio-Workbench.exe") {
            $zip = "${{ env.ZIP_NAME }}"
            Compress-Archive -Path "dist\\YT-Audio-Workbench.exe" -DestinationPath $zip -Force
          } elseif (Test-Path -Path "dist\\YT-Audio-Workbench\\*") {
            $zip = "${{ env.ZIP_NAME }}"
            Compress-Archive -Path "dist\\YT-Audio-Workbench\\*" -DestinationPath $zip -Force
          } else {
            Get-ChildItem -Recurse dist
            throw "Could not find PyInstaller output in dist/"
          }

      - name: Zip dist (*nix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          : "${ZIP_NAME:?ZIP_NAME not set}"
          if [ -f "dist/YT-Audio-Workbench" ]; then
            zip -j -r "${ZIP_NAME}" "dist/YT-Audio-Workbench"
          elif [ -d "dist/YT-Audio-Workbench" ]; then
            zip -r "${ZIP_NAME}" "dist/YT-Audio-Workbench"
          else
            echo "dist/ contents:"
            find dist -maxdepth 2 -print || true
            echo "Could not find PyInstaller output in dist/"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
          if-no-files-found: error
          retention-days: 7
